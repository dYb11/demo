package com.example.demo;

public class test {
    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        System.out.println(start);
        int[] a={9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7,9,2,5,6,3,1,7};
        //int[] a={9,2,5,9,6,3,1,7};
        speedinessSort(a,0,a.length-1);

        //a=insertionSort(a);
        String d="";

        System.out.println("用时："+String.valueOf(System.currentTimeMillis()-start));
        for(int c:a){
            d+=String.valueOf(c)+",";
        }
        System.out.println(d);
    }

    /**
     * 冒泡排序
     * @param a
     */
    public static int[] emitSort(int[] a){

        for(int i=0;i<a.length;i++){
            for(int j=i+1;j<a.length;j++){
                if(a[i]>a[j]){
                    int c=a[j];
                    a[j]=a[i];
                    a[i]=c;
                }
            }
        }
        return a;

    }

    /**
     * 选择排序
     * @param a
     */
    public static int[] selectSort(int[] a){

        int ji=0;
        int jd=0;

        for(int i=0;i<a.length;i++){
            ji=0;
            jd=a[i];
            for(int j=i+1;j<=a.length;j++){

                    if(j==a.length&&ji!=0){
                        int c=a[ji];
                        a[ji]=a[i];
                        a[i]=c;
                    }else if(j!=a.length){
                        if(jd>a[j]){
                            ji=j;
                            jd=a[j];
                        }
                    }
                }
            }
        return a;

    }

    /**
     * 插入排序
     * @param a
     */
    public static int[] insertionSort(int[] a){

        int[] ji = new int[a.length];
        for(int i=0;i<a.length;i++){

            for(int j=i;j>=0;j--){
                if(j==0||ji[j-1]<a[i]){
                    ji[j]=a[i];
                    break;
                }else
                    ji[j]=ji[j-1];
            }
        }
        return ji;
    }
    /**
     * 快速排序
     * @param a
     */
    public static int[] speedinessSort(int[] a,int p,int r){

        if(p<r){
            int q=partiton(a,p,r);
            speedinessSort(a,p,q-1);
            speedinessSort(a,q+1,r);
        }

        return null;
    }

    private  static int partiton(int[] a,int p,int r){
        int x=a[r];
        int i=p-1;
        for(int j=p;j<r;j++){
            if(a[j]<=x){
                i=i+1;
                int c=a[i];
                a[i]=a[j];
                a[j]=c;
            }
        }
        int c=a[i+1];
        a[i+1]=a[r];
        a[r]=c;
        return i+1;

    }

    /**
     * 并归排序
     * @param a
     */
    public static int[] partSort(int[] a){

        return a;
    }
}
